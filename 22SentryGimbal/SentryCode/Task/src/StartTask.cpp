/******************************
start task
****************************  */
#include "StartTask.h"
/**FreeRTOS*START***************/
#include "FreeRTOS.h" //FreeRTOS使用
#include "timers.h"
#include "list.h"
#include "queue.h"
#include "task.h"
/**FreeRTOS*END***************/
#include "MyTask.h"

/*开始任务*/
extern TaskHandle_t StartTask_Handler;

/*呼吸灯任务*/
/*-摘要-*/ #define LED
/*-优先-*/ #define LED_TASK_PRIO 1
/*-堆栈-*/ #define LED_STK_SIZE 100
/*-句柄-*/ TaskHandle_t LedTask_Handler;
/*-声明-*/ extern void Led_Task(void *pvParameters);

/*陀螺仪解算任务*/
/*-摘要-*/ #define IMU
/*-优先-*/ #define IMU_TASK_PRIO 4
/*-堆栈-*/ #define IMU_STK_SIZE 1000
/*-句柄-*/ TaskHandle_t ImuTask_Handler;
/*-声明-*/ extern void Imu_Task(void *pvParameters);

/*云台处理任务*/
/*-摘要-*/ #define GIMBAL
/*-优先-*/ #define GIMBAL_TASK_PRIO 5
/*-堆栈-*/ #define GIMBAL_STK_SIZE 1000
/*-句柄-*/ TaskHandle_t GimbalTask_Handler;
/*-声明-*/ extern void Gimbal_Task(void *pvParameters);

/*状态处理任务*/
/*-摘要-*/ #define STATE
/*-优先-*/ #define STATE_TASK_PRIO 3
/*-堆栈-*/ #define STATE_STK_SIZE 500
/*-句柄-*/ TaskHandle_t StateTask_Handler;
/*-声明-*/ extern void State_Task(void *pvParameters);

/*debug处理任务*/
/*-摘要-*/ #define DEBUG
/*-优先-*/ #define DEBUG_TASK_PRIO 2
/*-堆栈-*/ #define DEBUG_STK_SIZE 500
/*-句柄-*/ TaskHandle_t DebugTask_Handler;
/*-声明-*/ extern void Debug_Task(void *pvParameters);

/*cancom任务*/
/*-摘要-*/ #define CANCOM
/*-优先-*/ #define CANCOM_TASK_PRIO 1
/*-堆栈-*/ #define CANCOM_STK_SIZE 1024
/*-句柄-*/ TaskHandle_t CancomTask_Handler;
/*-声明-*/ extern void Cancom_Task(void *pvParameters);

// int8_t creatResult[10] = {-1};
// u8 taskNum = 0; //任务总数量

/**
  * @brief 开始任务
  * @note 用于创建任务，完事删了自己
  */
void Start_Task(void *pvParameters)
{
	taskENTER_CRITICAL(); //进入临界区
	//创建其他任务
	mTaskCreate(LED, Led);			//LED任务
	mTaskCreate(IMU,Imu);			//陀螺仪任务
	mTaskCreate(GIMBAL,Gimbal);		//gimbal 	
	// mTaskCreate(STATE,State);			//state task
	mTaskCreate(DEBUG,Debug);		//debug print task
	#if Gimbal_TOP_DEFINE  //TBSYCY
	// mTaskCreate(CANCOM,Cancom);		//can com task
	#endif
	/*初始化*/
	boardALLInit();

	//删除开始任务
	vTaskDelete(StartTask_Handler);
	taskEXIT_CRITICAL(); //退出临界区
}

